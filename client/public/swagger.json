{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "Comprehensive API",
    "description": "API for user authentication, database interactions, and AI-powered Q&A."
  },
  "host": "localhost:5000",
  "basePath": "/",
  "schemes": ["http"],
  "paths": {
    "/authenticate/login/": {
      "post": {
        "summary": "Login a user",
        "description": "Authenticate a user using their email and password.",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Login successful"
          },
          "401": {
            "description": "Unauthorized access"
          }
        }
      }
    },
    "/authenticate/logout/": {
      "post": {
        "summary": "Logout a user",
        "description": "Log out the currently logged-in user.",
        "responses": {
          "200": {
            "description": "Logout successful"
          },
          "401": {
            "description": "Unauthorized access"
          }
        }
      }
    },
    "/authenticate/register/": {
      "put": {
        "summary": "Register a user",
        "description": "Register a new user and send a verification email.",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Registration successful"
          },
          "401": {
            "description": "Registration failed"
          }
        }
      }
    },
    "/authenticate/reset-password/": {
      "post": {
        "summary": "Reset user password",
        "description": "Reset the user's password using a reset code.",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string"
                },
                "reset_code": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Password reset successful"
          },
          "401": {
            "description": "Unauthorized access"
          }
        }
      }
    },
    "/authenticate/request-password-reset/": {
      "post": {
        "summary": "Request password reset",
        "description": "Send a password reset code to the user's email.",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Reset code sent successfully"
          },
          "401": {
            "description": "Unauthorized access"
          }
        }
      }
    },
    "/authenticate/verify/": {
      "post": {
        "summary": "Verify a user",
        "description": "Verify a user's account using a verification code.",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "verification_code": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Verification successful"
          },
          "401": {
            "description": "Verification failed"
          }
        }
      }
    },
    "/database/get-user-information/": {
      "get": {
        "summary": "Get user information",
        "description": "Retrieve the logged-in user's information.",
        "responses": {
          "200": {
            "description": "User information retrieved successfully",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Failed to retrieve user information"
          }
        }
      }
    },
    "/database/get-scrape-history/": {
      "get": {
        "summary": "Get scrape history",
        "description": "Retrieve the scrape history for the logged-in user.",
        "responses": {
          "200": {
            "description": "Scrape history retrieved successfully",
            "schema": {
              "type": "object",
              "properties": {
                "scrapes": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Scrape"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Failed to retrieve scrape history"
          }
        }
      }
    },
    "/database/change-name/": {
      "post": {
        "summary": "Change user name",
        "description": "Update the name of the logged-in user.",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Name changed successfully"
          },
          "400": {
            "description": "Failed to change name"
          }
        }
      }
    },
    "/database/get-all-users/": {
      "post": {
        "summary": "Get all users",
        "description": "Retrieve a list of all users (Admin only).",
        "responses": {
          "200": {
            "description": "List of users retrieved successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "400": {
            "description": "Failed to retrieve users"
          }
        }
      }
    },
    "/database/get-endpoint-usage/": {
      "get": {
        "summary": "Get endpoint usage",
        "description": "Retrieve usage statistics for all endpoints (Admin only).",
        "responses": {
          "200": {
            "description": "Endpoint usage statistics retrieved successfully",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "integer"
              }
            }
          },
          "400": {
            "description": "Failed to retrieve endpoint usage statistics"
          }
        }
      }
    },
    "/qna/query": {
      "get": {
        "summary": "Query the AI server",
        "description": "Send a URL and a prompt to scrape and query the AI server for a response.",
        "parameters": [
          {
            "name": "url",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The URL to scrape."
          },
          {
            "name": "prompt",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The prompt to send to the AI server."
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "The API key for authentication in the format 'Bearer {API_KEY}'."
          }
        ],
        "responses": {
          "200": {
            "description": "Query executed successfully",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Error occurred while processing the query"
          }
        }
      }
    }
  },
  "definitions": {
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "email": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "is_verified": {
          "type": "boolean"
        }
      }
    },
    "Scrape": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "user_id": {
          "type": "integer"
        },
        "data": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    }
  }
}
